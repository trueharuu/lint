[35m[src/tests/any.ts][0m[0m
[30m0[0m[0m SourceFile[[33m0..19[0m[0m] [30mconst u: any = 0;[0m[0m [2;31m[312][0m[0m
  [30m0[0m[0m SyntaxList[[33m0..17[0m[0m] [30mconst u: any = 0;[0m[0m [2;31m[358][0m[0m
    [30m0[0m[0m VariableStatement[[33m0..17[0m[0m] [30mconst u: any = 0;[0m[0m [2;31m[243][0m[0m
      [30m0[0m[0m VariableDeclarationList[[33m0..16[0m[0m] [30mconst u: any = 0[0m[0m [2;31m[261][0m[0m
        [30m0[0m[0m ConstKeyword[[33m0..5[0m[0m] [30mconst[0m[0m [2;31m[87][0m[0m
        [30m1[0m[0m SyntaxList[[33m5..16[0m[0m] [30mu: any = 0[0m[0m [2;31m[358][0m[0m
          [30m0[0m[0m VariableDeclaration[[33m5..16[0m[0m] [30mu: any = 0[0m[0m [2;31m[260][0m[0m
            [30m0[0m[0m Identifier[[33m5..7[0m[0m] [30mu[0m[0m [2;31m[80][0m[0m
            [30m1[0m[0m ColonToken[[33m7..8[0m[0m] [30m:[0m[0m [2;31m[59][0m[0m
            [30m2[0m[0m AnyKeyword[[33m8..12[0m[0m] [30many[0m[0m [2;31m[133][0m[0m
            [30m3[0m[0m EqualsToken[[33m12..14[0m[0m] [30m=[0m[0m [2;31m[64][0m[0m
            [30m4[0m[0m NumericLiteral[[33m14..16[0m[0m] [30m0[0m[0m [2;31m[9][0m[0m
      [30m1[0m[0m SemicolonToken[[33m16..17[0m[0m] [30m;[0m[0m [2;31m[27][0m[0m
  [30m1[0m[0m EndOfFileToken[[33m17..19[0m[0m] [30m[0m[0m [2;31m[1][0m[0m

[35;2m[src/tests/any.ts::001][0m[0m Lint [31m#[deny(restriction::any)][0m[0m triggered at [34m[8..12][0m[0m:
[30;3mChecks for the use of the type `any`.[0m[0m
const u:[38;5;199m any[0m[0m = 0;


[35m[src/tests/boxed_types.ts][0m[0m
[30m0[0m[0m SourceFile[[33m0..26[0m[0m] [30mconst i: String = 'abc';[0m[0m [2;31m[312][0m[0m
  [30m0[0m[0m SyntaxList[[33m0..24[0m[0m] [30mconst i: String = 'abc';[0m[0m [2;31m[358][0m[0m
    [30m0[0m[0m VariableStatement[[33m0..24[0m[0m] [30mconst i: String = 'abc';[0m[0m [2;31m[243][0m[0m
      [30m0[0m[0m VariableDeclarationList[[33m0..23[0m[0m] [30mconst i: String = 'abc'[0m[0m [2;31m[261][0m[0m
        [30m0[0m[0m ConstKeyword[[33m0..5[0m[0m] [30mconst[0m[0m [2;31m[87][0m[0m
        [30m1[0m[0m SyntaxList[[33m5..23[0m[0m] [30mi: String = 'abc'[0m[0m [2;31m[358][0m[0m
          [30m0[0m[0m VariableDeclaration[[33m5..23[0m[0m] [30mi: String = 'abc'[0m[0m [2;31m[260][0m[0m
            [30m0[0m[0m Identifier[[33m5..7[0m[0m] [30mi[0m[0m [2;31m[80][0m[0m
            [30m1[0m[0m ColonToken[[33m7..8[0m[0m] [30m:[0m[0m [2;31m[59][0m[0m
            [30m2[0m[0m TypeReference[[33m8..15[0m[0m] [30mString[0m[0m [2;31m[183][0m[0m
              [30m0[0m[0m Identifier[[33m8..15[0m[0m] [30mString[0m[0m [2;31m[80][0m[0m
            [30m3[0m[0m EqualsToken[[33m15..17[0m[0m] [30m=[0m[0m [2;31m[64][0m[0m
            [30m4[0m[0m StringLiteral[[33m17..23[0m[0m] [30m'abc'[0m[0m [2;31m[11][0m[0m
      [30m1[0m[0m SemicolonToken[[33m23..24[0m[0m] [30m;[0m[0m [2;31m[27][0m[0m
  [30m1[0m[0m EndOfFileToken[[33m24..26[0m[0m] [30m[0m[0m [2;31m[1][0m[0m

[35;2m[src/tests/boxed_types.ts::001][0m[0m Lint [33m#[warn(suspicious::boxed_types)][0m[0m triggered at [34m[8..15][0m[0m:
[30;3mChecks for the use of boxed types such as `String` or `Boolean`.[0m[0m
const i:[38;5;199m String[0m[0m = 'abc';

= [1;36mfix:[0m[0m
const i:[32mstring[0m[0m = 'abc';


[35m[src/tests/eval.ts][0m[0m
[30m0[0m[0m SourceFile[[33m0..16[0m[0m] [30meval('1 + 1');[0m[0m [2;31m[312][0m[0m
  [30m0[0m[0m SyntaxList[[33m0..14[0m[0m] [30meval('1 + 1');[0m[0m [2;31m[358][0m[0m
    [30m0[0m[0m ExpressionStatement[[33m0..14[0m[0m] [30meval('1 + 1');[0m[0m [2;31m[244][0m[0m
      [30m0[0m[0m CallExpression[[33m0..13[0m[0m] [30meval('1 + 1')[0m[0m [2;31m[213][0m[0m
        [30m0[0m[0m Identifier[[33m0..4[0m[0m] [30meval[0m[0m [2;31m[80][0m[0m
        [30m1[0m[0m OpenParenToken[[33m4..5[0m[0m] [30m([0m[0m [2;31m[21][0m[0m
        [30m2[0m[0m SyntaxList[[33m5..12[0m[0m] [30m'1 + 1'[0m[0m [2;31m[358][0m[0m
          [30m0[0m[0m StringLiteral[[33m5..12[0m[0m] [30m'1 + 1'[0m[0m [2;31m[11][0m[0m
        [30m3[0m[0m CloseParenToken[[33m12..13[0m[0m] [30m)[0m[0m [2;31m[22][0m[0m
      [30m1[0m[0m SemicolonToken[[33m13..14[0m[0m] [30m;[0m[0m [2;31m[27][0m[0m
  [30m1[0m[0m EndOfFileToken[[33m14..16[0m[0m] [30m[0m[0m [2;31m[1][0m[0m

[35;2m[src/tests/eval.ts::001][0m[0m Lint [31m#[deny(restriction::eval)][0m[0m triggered at [34m[0..13][0m[0m:
[30;3mChecks for the use of `eval`.[0m[0m
[38;5;199meval('1 + 1')[0m[0m;


[35m[src/tests/non_ascii_ident.ts][0m[0m
[30m0[0m[0m SourceFile[[33m0..24[0m[0m] [30m...[0m[0m [2;31m[312][0m[0m
  [30m0[0m[0m SyntaxList[[33m0..22[0m[0m] [30m...[0m[0m [2;31m[358][0m[0m
    [30m0[0m[0m VariableStatement[[33m0..10[0m[0m] [30mlet »π = 1;[0m[0m [2;31m[243][0m[0m
      [30m0[0m[0m VariableDeclarationList[[33m0..9[0m[0m] [30mlet »π = 1[0m[0m [2;31m[261][0m[0m
        [30m0[0m[0m LetKeyword[[33m0..3[0m[0m] [30mlet[0m[0m [2;31m[121][0m[0m
        [30m1[0m[0m SyntaxList[[33m3..9[0m[0m] [30m»π = 1[0m[0m [2;31m[358][0m[0m
          [30m0[0m[0m VariableDeclaration[[33m3..9[0m[0m] [30m»π = 1[0m[0m [2;31m[260][0m[0m
            [30m0[0m[0m Identifier[[33m3..5[0m[0m] [30m»π[0m[0m [2;31m[80][0m[0m
            [30m1[0m[0m EqualsToken[[33m5..7[0m[0m] [30m=[0m[0m [2;31m[64][0m[0m
            [30m2[0m[0m NumericLiteral[[33m7..9[0m[0m] [30m1[0m[0m [2;31m[9][0m[0m
      [30m1[0m[0m SemicolonToken[[33m9..10[0m[0m] [30m;[0m[0m [2;31m[27][0m[0m
    [30m1[0m[0m VariableStatement[[33m10..22[0m[0m] [30mlet d = 1;[0m[0m [2;31m[243][0m[0m
      [30m0[0m[0m VariableDeclarationList[[33m10..21[0m[0m] [30mlet d = 1[0m[0m [2;31m[261][0m[0m
        [30m0[0m[0m LetKeyword[[33m10..15[0m[0m] [30mlet[0m[0m [2;31m[121][0m[0m
        [30m1[0m[0m SyntaxList[[33m15..21[0m[0m] [30md = 1[0m[0m [2;31m[358][0m[0m
          [30m0[0m[0m VariableDeclaration[[33m15..21[0m[0m] [30md = 1[0m[0m [2;31m[260][0m[0m
            [30m0[0m[0m Identifier[[33m15..17[0m[0m] [30md[0m[0m [2;31m[80][0m[0m
            [30m1[0m[0m EqualsToken[[33m17..19[0m[0m] [30m=[0m[0m [2;31m[64][0m[0m
            [30m2[0m[0m NumericLiteral[[33m19..21[0m[0m] [30m1[0m[0m [2;31m[9][0m[0m
      [30m1[0m[0m SemicolonToken[[33m21..22[0m[0m] [30m;[0m[0m [2;31m[27][0m[0m
  [30m1[0m[0m EndOfFileToken[[33m22..24[0m[0m] [30m[0m[0m [2;31m[1][0m[0m

[35;2m[src/tests/non_ascii_ident.ts::001][0m[0m Lint [33m#[warn(restriction::non_ascii_ident)][0m[0m triggered at [34m[3..5][0m[0m:
[30;3mChecks for variables that use non-ASCII characters.[0m[0m
let[38;5;199m »π[0m[0m = 1;
let[38;5;120m d[0m[0m = 1;


[35m[src/tests/non_bool_condition.ts][0m[0m
[30m0[0m[0m SourceFile[[33m0..38[0m[0m] [30m...[0m[0m [2;31m[312][0m[0m
  [30m0[0m[0m SyntaxList[[33m0..36[0m[0m] [30m...[0m[0m [2;31m[358][0m[0m
    [30m0[0m[0m IfStatement[[33m0..17[0m[0m] [30m...[0m[0m [2;31m[245][0m[0m
      [30m0[0m[0m IfKeyword[[33m0..2[0m[0m] [30mif[0m[0m [2;31m[101][0m[0m
      [30m1[0m[0m OpenParenToken[[33m2..4[0m[0m] [30m([0m[0m [2;31m[21][0m[0m
      [30m2[0m[0m BinaryExpression[[33m4..11[0m[0m] [30m1 === 1[0m[0m [2;31m[226][0m[0m
        [30m0[0m[0m NumericLiteral[[33m4..5[0m[0m] [30m1[0m[0m [2;31m[9][0m[0m
        [30m1[0m[0m EqualsEqualsEqualsToken[[33m5..9[0m[0m] [30m===[0m[0m [2;31m[37][0m[0m
        [30m2[0m[0m NumericLiteral[[33m9..11[0m[0m] [30m1[0m[0m [2;31m[9][0m[0m
      [30m3[0m[0m CloseParenToken[[33m11..12[0m[0m] [30m)[0m[0m [2;31m[22][0m[0m
      [30m4[0m[0m Block[[33m12..17[0m[0m] [30m...[0m[0m [2;31m[241][0m[0m
        [30m0[0m[0m OpenBraceToken[[33m12..14[0m[0m] [30m{[0m[0m [2;31m[19][0m[0m
        [30m1[0m[0m SyntaxList[[33m14..14[0m[0m] [30m[0m[0m [2;31m[358][0m[0m
        [30m2[0m[0m CloseBraceToken[[33m14..17[0m[0m] [30m}[0m[0m [2;31m[20][0m[0m
    [30m1[0m[0m IfStatement[[33m17..36[0m[0m] [30m...[0m[0m [2;31m[245][0m[0m
      [30m0[0m[0m IfKeyword[[33m17..23[0m[0m] [30mif[0m[0m [2;31m[101][0m[0m
      [30m1[0m[0m OpenParenToken[[33m23..25[0m[0m] [30m([0m[0m [2;31m[21][0m[0m
      [30m2[0m[0m BinaryExpression[[33m25..30[0m[0m] [30m1 + 1[0m[0m [2;31m[226][0m[0m
        [30m0[0m[0m NumericLiteral[[33m25..26[0m[0m] [30m1[0m[0m [2;31m[9][0m[0m
        [30m1[0m[0m PlusToken[[33m26..28[0m[0m] [30m+[0m[0m [2;31m[40][0m[0m
        [30m2[0m[0m NumericLiteral[[33m28..30[0m[0m] [30m1[0m[0m [2;31m[9][0m[0m
      [30m3[0m[0m CloseParenToken[[33m30..31[0m[0m] [30m)[0m[0m [2;31m[22][0m[0m
      [30m4[0m[0m Block[[33m31..36[0m[0m] [30m...[0m[0m [2;31m[241][0m[0m
        [30m0[0m[0m OpenBraceToken[[33m31..33[0m[0m] [30m{[0m[0m [2;31m[19][0m[0m
        [30m1[0m[0m SyntaxList[[33m33..33[0m[0m] [30m[0m[0m [2;31m[358][0m[0m
        [30m2[0m[0m CloseBraceToken[[33m33..36[0m[0m] [30m}[0m[0m [2;31m[20][0m[0m
  [30m1[0m[0m EndOfFileToken[[33m36..38[0m[0m] [30m[0m[0m [2;31m[1][0m[0m

[35;2m[src/tests/non_bool_condition.ts::001][0m[0m Lint [33m#[warn(suspicious::non_bool_condition)][0m[0m triggered at [34m[25..30][0m[0m:
[30;3mChecks conditions that are not explicitly a boolean.[0m[0m
if ([38;5;120m1 === 1[0m[0m) {
}

if ([38;5;199m1 + 1[0m[0m) {
}


[35m[src/tests/object_eq.ts][0m[0m
[30m0[0m[0m SourceFile[[33m0..56[0m[0m] [30m...[0m[0m [2;31m[312][0m[0m
  [30m0[0m[0m SyntaxList[[33m0..54[0m[0m] [30m...[0m[0m [2;31m[358][0m[0m
    [30m0[0m[0m IfStatement[[33m0..34[0m[0m] [30m...[0m[0m [2;31m[245][0m[0m
      [30m0[0m[0m IfKeyword[[33m0..2[0m[0m] [30mif[0m[0m [2;31m[101][0m[0m
      [30m1[0m[0m OpenParenToken[[33m2..4[0m[0m] [30m([0m[0m [2;31m[21][0m[0m
      [30m2[0m[0m BinaryExpression[[33m4..28[0m[0m] [30mnew Date() == new Date()[0m[0m [2;31m[226][0m[0m
        [30m0[0m[0m NewExpression[[33m4..14[0m[0m] [30mnew Date()[0m[0m [2;31m[214][0m[0m
          [30m0[0m[0m NewKeyword[[33m4..7[0m[0m] [30mnew[0m[0m [2;31m[105][0m[0m
          [30m1[0m[0m Identifier[[33m7..12[0m[0m] [30mDate[0m[0m [2;31m[80][0m[0m
          [30m2[0m[0m OpenParenToken[[33m12..13[0m[0m] [30m([0m[0m [2;31m[21][0m[0m
          [30m3[0m[0m SyntaxList[[33m13..13[0m[0m] [30m[0m[0m [2;31m[358][0m[0m
          [30m4[0m[0m CloseParenToken[[33m13..14[0m[0m] [30m)[0m[0m [2;31m[22][0m[0m
        [30m1[0m[0m EqualsEqualsToken[[33m14..17[0m[0m] [30m==[0m[0m [2;31m[35][0m[0m
        [30m2[0m[0m NewExpression[[33m17..28[0m[0m] [30mnew Date()[0m[0m [2;31m[214][0m[0m
          [30m0[0m[0m NewKeyword[[33m17..21[0m[0m] [30mnew[0m[0m [2;31m[105][0m[0m
          [30m1[0m[0m Identifier[[33m21..26[0m[0m] [30mDate[0m[0m [2;31m[80][0m[0m
          [30m2[0m[0m OpenParenToken[[33m26..27[0m[0m] [30m([0m[0m [2;31m[21][0m[0m
          [30m3[0m[0m SyntaxList[[33m27..27[0m[0m] [30m[0m[0m [2;31m[358][0m[0m
          [30m4[0m[0m CloseParenToken[[33m27..28[0m[0m] [30m)[0m[0m [2;31m[22][0m[0m
      [30m3[0m[0m CloseParenToken[[33m28..29[0m[0m] [30m)[0m[0m [2;31m[22][0m[0m
      [30m4[0m[0m Block[[33m29..34[0m[0m] [30m...[0m[0m [2;31m[241][0m[0m
        [30m0[0m[0m OpenBraceToken[[33m29..31[0m[0m] [30m{[0m[0m [2;31m[19][0m[0m
        [30m1[0m[0m SyntaxList[[33m31..31[0m[0m] [30m[0m[0m [2;31m[358][0m[0m
        [30m2[0m[0m CloseBraceToken[[33m31..34[0m[0m] [30m}[0m[0m [2;31m[20][0m[0m
    [30m1[0m[0m IfStatement[[33m34..54[0m[0m] [30m...[0m[0m [2;31m[245][0m[0m
      [30m0[0m[0m IfKeyword[[33m34..40[0m[0m] [30mif[0m[0m [2;31m[101][0m[0m
      [30m1[0m[0m OpenParenToken[[33m40..42[0m[0m] [30m([0m[0m [2;31m[21][0m[0m
      [30m2[0m[0m BinaryExpression[[33m42..48[0m[0m] [30m0 == 0[0m[0m [2;31m[226][0m[0m
        [30m0[0m[0m NumericLiteral[[33m42..43[0m[0m] [30m0[0m[0m [2;31m[9][0m[0m
        [30m1[0m[0m EqualsEqualsToken[[33m43..46[0m[0m] [30m==[0m[0m [2;31m[35][0m[0m
        [30m2[0m[0m NumericLiteral[[33m46..48[0m[0m] [30m0[0m[0m [2;31m[9][0m[0m
      [30m3[0m[0m CloseParenToken[[33m48..49[0m[0m] [30m)[0m[0m [2;31m[22][0m[0m
      [30m4[0m[0m Block[[33m49..54[0m[0m] [30m...[0m[0m [2;31m[241][0m[0m
        [30m0[0m[0m OpenBraceToken[[33m49..51[0m[0m] [30m{[0m[0m [2;31m[19][0m[0m
        [30m1[0m[0m SyntaxList[[33m51..51[0m[0m] [30m[0m[0m [2;31m[358][0m[0m
        [30m2[0m[0m CloseBraceToken[[33m51..54[0m[0m] [30m}[0m[0m [2;31m[20][0m[0m
  [30m1[0m[0m EndOfFileToken[[33m54..56[0m[0m] [30m[0m[0m [2;31m[1][0m[0m

[35;2m[src/tests/object_eq.ts::001][0m[0m Lint [31m#[deny(suspicious::object_eq)][0m[0m triggered at [34m[4..28][0m[0m:
[30;3mChecks for comparisons between `object` types.[0m[0m
if ([38;5;199mnew Date() == new Date()[0m[0m) {
}

if ([38;5;120m0 == 0[0m[0m) {
}


[35m[src/tests/statement.ts][0m[0m
[30m0[0m[0m SourceFile[[33m0..14[0m[0m] [30mconst t = 0;[0m[0m [2;31m[312][0m[0m
  [30m0[0m[0m SyntaxList[[33m0..12[0m[0m] [30mconst t = 0;[0m[0m [2;31m[358][0m[0m
    [30m0[0m[0m VariableStatement[[33m0..12[0m[0m] [30mconst t = 0;[0m[0m [2;31m[243][0m[0m
      [30m0[0m[0m VariableDeclarationList[[33m0..11[0m[0m] [30mconst t = 0[0m[0m [2;31m[261][0m[0m
        [30m0[0m[0m ConstKeyword[[33m0..5[0m[0m] [30mconst[0m[0m [2;31m[87][0m[0m
        [30m1[0m[0m SyntaxList[[33m5..11[0m[0m] [30mt = 0[0m[0m [2;31m[358][0m[0m
          [30m0[0m[0m VariableDeclaration[[33m5..11[0m[0m] [30mt = 0[0m[0m [2;31m[260][0m[0m
            [30m0[0m[0m Identifier[[33m5..7[0m[0m] [30mt[0m[0m [2;31m[80][0m[0m
            [30m1[0m[0m EqualsToken[[33m7..9[0m[0m] [30m=[0m[0m [2;31m[64][0m[0m
            [30m2[0m[0m NumericLiteral[[33m9..11[0m[0m] [30m0[0m[0m [2;31m[9][0m[0m
      [30m1[0m[0m SemicolonToken[[33m11..12[0m[0m] [30m;[0m[0m [2;31m[27][0m[0m
  [30m1[0m[0m EndOfFileToken[[33m12..14[0m[0m] [30m[0m[0m [2;31m[1][0m[0m

[35m[src/tests/useless_null_assert.ts][0m[0m
[30m0[0m[0m SourceFile[[33m0..35[0m[0m] [30m...[0m[0m [2;31m[312][0m[0m
  [30m0[0m[0m SyntaxList[[33m0..33[0m[0m] [30m...[0m[0m [2;31m[358][0m[0m
    [30m0[0m[0m VariableStatement[[33m0..27[0m[0m] [30mconst a: number | null = 0;[0m[0m [2;31m[243][0m[0m
      [30m0[0m[0m VariableDeclarationList[[33m0..26[0m[0m] [30mconst a: number | null = 0[0m[0m [2;31m[261][0m[0m
        [30m0[0m[0m ConstKeyword[[33m0..5[0m[0m] [30mconst[0m[0m [2;31m[87][0m[0m
        [30m1[0m[0m SyntaxList[[33m5..26[0m[0m] [30ma: number | null = 0[0m[0m [2;31m[358][0m[0m
          [30m0[0m[0m VariableDeclaration[[33m5..26[0m[0m] [30ma: number | null = 0[0m[0m [2;31m[260][0m[0m
            [30m0[0m[0m Identifier[[33m5..7[0m[0m] [30ma[0m[0m [2;31m[80][0m[0m
            [30m1[0m[0m ColonToken[[33m7..8[0m[0m] [30m:[0m[0m [2;31m[59][0m[0m
            [30m2[0m[0m UnionType[[33m8..22[0m[0m] [30mnumber | null[0m[0m [2;31m[192][0m[0m
              [30m0[0m[0m SyntaxList[[33m8..22[0m[0m] [30mnumber | null[0m[0m [2;31m[358][0m[0m
                [30m0[0m[0m NumberKeyword[[33m8..15[0m[0m] [30mnumber[0m[0m [2;31m[150][0m[0m
                [30m1[0m[0m BarToken[[33m15..17[0m[0m] [30m|[0m[0m [2;31m[52][0m[0m
                [30m2[0m[0m LiteralType[[33m17..22[0m[0m] [30mnull[0m[0m [2;31m[201][0m[0m
                  [30m0[0m[0m NullKeyword[[33m17..22[0m[0m] [30mnull[0m[0m [2;31m[106][0m[0m
            [30m3[0m[0m EqualsToken[[33m22..24[0m[0m] [30m=[0m[0m [2;31m[64][0m[0m
            [30m4[0m[0m NumericLiteral[[33m24..26[0m[0m] [30m0[0m[0m [2;31m[9][0m[0m
      [30m1[0m[0m SemicolonToken[[33m26..27[0m[0m] [30m;[0m[0m [2;31m[27][0m[0m
    [30m1[0m[0m ExpressionStatement[[33m27..33[0m[0m] [30ma!!;[0m[0m [2;31m[244][0m[0m
      [30m0[0m[0m NonNullExpression[[33m27..32[0m[0m] [30ma!![0m[0m [2;31m[235][0m[0m
        [30m0[0m[0m NonNullExpression[[33m27..31[0m[0m] [30ma![0m[0m [2;31m[235][0m[0m
          [30m0[0m[0m Identifier[[33m27..30[0m[0m] [30ma[0m[0m [2;31m[80][0m[0m
          [30m1[0m[0m ExclamationToken[[33m30..31[0m[0m] [30m![0m[0m [2;31m[54][0m[0m
        [30m1[0m[0m ExclamationToken[[33m31..32[0m[0m] [30m![0m[0m [2;31m[54][0m[0m
      [30m1[0m[0m SemicolonToken[[33m32..33[0m[0m] [30m;[0m[0m [2;31m[27][0m[0m
  [30m1[0m[0m EndOfFileToken[[33m33..35[0m[0m] [30m[0m[0m [2;31m[1][0m[0m

[35;2m[src/tests/useless_null_assert.ts::001][0m[0m Lint [33m#[warn(complexity::useless_null_assert)][0m[0m triggered at [34m[27..32][0m[0m:
[30;3mChecks for more than one null assertion in a row.[0m[0m
const a: number | null = 0;[38;5;199m
a!![0m[0m;

= [1;36mfix:[0m[0m
const a: number | null = 0;[32ma![0m[0m;

